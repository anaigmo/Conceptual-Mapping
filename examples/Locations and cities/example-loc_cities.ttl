@base <http://example.com/ns#> .
@prefix cm: <http://vocab.linkeddata.es/def/conceptual-mapping#> .
@prefix cmp: <http://vocab.linkeddata.es/def/conceptual-mapping/protocols_list/> .
@prefix cmf: <http://vocab.linkeddata.es/def/conceptual-mapping/functions_list/> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .
@prefix wotsec: <https://www.w3.org/2019/wot/security#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix eg: <http://example.com/geo#> .


:FrameLoc a cm:SourceFrame;
    cm:expression "$.coordinates[*]";
    cm:hasField :lat;
    cm:hasField :long;
    cm:hasField :loc_city;
    cm:hasDataSource [ a cm:SynchronousSource;
        dcat:mediaType "text/json";
        dcat:accessService [
            cm:hasProtocol cmp:https;
            dcat:endpointURL "https://ex.com/geodata/coordinates.json"
            cm:hasSecurityScheme [ a wotsec:NoSecurityScheme; ];
        ] ;
    ] .

:lat a cm:DataField ; cm:field "$\dollar$.latitude" .
:long a cm:DataField ; cm:field "$\dollar$.longitude" .
:loc_city a cm:DataField; cm:field "$\dollar$.city" .

:SubjectLoc a cm:ReferenceNodeMap ;
    cm:hasEvaluableExpression [
        cm:hasFunctionName cmf:concat;
        cm:hasInput ([cm:returns "http://ex.com/loc/"]
                     :lat [ cm:returns "-" ] :long) ] .

:StatementLoc1 a cm:StatementMap ;
    cm:hasFrame :FrameLoc ;
    cm:subject :SubjectLoc ;
    cm:predicate [ a cm:ReferenceNodeMap;
        cm:hasEvaluableExpression [cm:returns rdf:type ] ];
    cm:object [ cm:hasEvaluableExpression [cm:returns eg:Location] ].

:StatementLoc2 a cm:StatementMap ;
    cm:hasFrame :FrameLoc ;
    cm:subject :SubjectLoc ;
    cm:predicate [ a cm:ReferenceNodeMap;
        cm:hasEvaluableExpression [cm:returns eg:lat] ];
    cm:object [ a cm:Literal; cm:hasEvaluableExpression :lat ];
    cm:hasDatatype [cm:hasEvaluableExpression xsd:decimal ].

:StatementLoc3 a cm:StatementMap ;
    cm:hasFrame :FrameLoc ;
    cm:subject :SubjectLoc ;
    cm:predicate [ a cm:ReferenceNodeMap;
        cm:hasEvaluableExpression [cm:returns eg:long] ];
    cm:object [ a cm:Literal; cm:hasEvaluableExpression :long ];
    cm:hasDatatype [ cm:hasEvaluableExpression xsd:decimal ].

















:FrameCities a cm:SourceFrame ;
    cm:expression "SELECT * FROM cities;";
    cm:hasField :c_city;
    cm:hasField :population;
    cm:hasField :year;
    cm:hasNestedFrame [
        cm:expression "$.zipcodes[*]";
        cm:hasField :zipcode ];
    cm:hasDataSource [ a cm:SynchronousSource;
        dcat:mediaType "text/plain";
        dcat:accessService [
            cm:hasProtocol cmp:jdbc;
            dcat:endpointURL "jdbc:mysql://localhost:3306/citydb";
            cm:hasSecurityScheme [a wotsec:NoSecurityScheme;] ].

:c_city a cm:DataField; cm:field "city" .
:population a cm:DataField; cm:field "population" .
:year a cm:DataField; cm:field "year_modified" .
:zipcode a cm:DataField cm:field "zipcodes"


:city_ns a cm:FunctionExpression ;
    cm:functionName cmf:replace ;
    cm:hasInput (:c_city, " ", "")

:SubjectCities a cm:ReferenceNodeMap;
    cm:hasEvaluableExpression [
        cm:hasFunctionName cmf:concat;
        cm:hasInput ([cm:returns "http://ex.com/city/"] :city_ns)].

:StatementCit1 a cm:StatementMap ;
    cm:hasFrame :FrameCities ;
    cm:subject :SubjectCities ;
    cm:predicate [ a cm:ReferenceNodeMap;
        cm:hasEvaluableExpression [cm:returns rdf:type] ];
    cm:object [ a cm:ReferenceNodeMap;
        cm:hasEvaluableExpression  [cm:returns eg:City] ] .

:StatementCit3 a cm:StatementMap ;
    cm:hasFrame :FrameCities ;
    cm:subject :SubjectCities ;
    cm:predicate [ a cm:ReferenceNodeMap;
        cm:hasEvaluableExpression [cm:returns eg:zipcode] ];
    cm:object [ a cm:Literal;
        cm:hasEvaluableExpression [cm:returns :zipcode] ];
    cm:hasDatatype [ cm:hasEvaluableExpression xsd:integer ].


:StatementCit2 a cm:ConditionalStatementMap ;
    cm:hasFrame :FrameCities ;
    cm:subject :SubjectCities ;
    cm:predicate [ a cm:ReferenceNodeMap;
        cm:hasEvaluableExpression [cm:returns eg:population] ];
    cm:object [ a cm:Literal;
        cm:hasEvaluableExpression  [cm:returns :population] ];
    cm:hasDatatype [ cm:hasEvaluableExpression xsd:nonNegativeInteger ];
    cm:hasBooleanCondition [
        cm:functionName cmf:greater_than ;
        cm:hasInput ( :year 2020 ) ] .


:LinkExp1 a cm:LinkingExpression ;
    cm:source :StatementCit1 ;
    cm:target :StatementLoc1 ;
    cm:property eg:location ;
    cm:hasBooleanCondition [
        cm:functionName cmf:greater_than ;
        cm:hasInput ( :levfun 0.75 ) ] .

:levfun a cm:FunctionExpression ;
    cm:functionName cmf:levenshtein_distance ;
    cm:hasInput (:c_city :loc_city) .
